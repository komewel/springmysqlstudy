sts-3 버전

빌드랑 배포하는법
1. 빌드란? : build , war를 만드는 것(Maven Build)  
2. 배포란? : deploy, war를 was에 배포하는 것(was : Tomcat)
 
프로젝트 우클릭 run -> maven build(5) -> goals: clean package 적고 run
war를 만드는 기준:
*빌드 
1. 프로젝트 Run - Maven Build 
2. war 이름
      - pom.xml 
   1) artifactId    : app14
   2) packaging     : war
   3) version       : 1.0.0-BUILD-SNAPSHOT 
      생성되는 이름    :  -app14-1.0.0-BUILD-SNAPSHOT.war

3. war위치
    프로젝트\target\app14-1.0.0-BUILD-SNAPSHOT.war
    // 빌드작업을 하고 성공시 BUILD SUCCESS가 뜨면 정상작동한것이다.
    // 성공결과는 project -> target에 결과물이 생성된다.
    // import를 눌러서 web -> warfile로 결과물을 생성시키면 전에 결과물과 배포할때는
      동일하나 이것과 달리 build 메뉴로 만드는 결과물을 무슨 오류가 있는지 알면서 제작이 가능      	하다는 장점이 있다.

*배포 전 선행작업
1. 포트 변경(오라클 사용 대비), 배포할때 쓰는 Tomcat은 우리가 기존에 스프링에서 쓰던 Tomcat      	이랑 다른것이다 그저 복사해서 끌어다가 쓰는것일뿐이다(=복사본), 복사본에 포트번호를 	그동안 바꿔서 썼을뿐이다
2. CATARINA_HOME -> conf -> server.xml -> Connector port="8080"을 9090으로 수정하면 원	본이 수정된것이다.

*배포 : 방금 만든 war 를 was 를 통해 배포하는것
1. CATARINA_HOME을 연다(=Tomcat, 초반에 환경변수 설정할때 썻던 이름)
2. CATARINA_HOME\webapps 디렉터리를 연다.(war 배포하는 (장소)폴더 이름)
3. CATARINA_HOME\webapps 디렉터리에 war파일을 복사 붙여넣기 해두면 된다.
4. Tomcat을 구동한다.(지금까지 Tomcat이 꺼져있는 상황에서 작업을 한거였다.)
   1) windows : CATARINA_HOME\bin\startup.bat 파일 실행
   2) linux   : CATARINA_HOME\bin\startup.sh 파일 실행
5. CATARINA_HOME\webapps 디렉터리에 war 파일과 같은 이름의 디렉터리가 생긴다.
6. 디렉터리에 있는 내용으로 보여준다(=webRootdirectory)

* 실행시키면(관리자 권한으로) sts-3 에서 console 창에 뜨던 익숙한것들이 여기서 찍히는 것
* 닫을때는 shutdown.bat(관리자 권한)을 써야한다(linux는 shutdown.sh), 그냥 닫는게 아니다.

*확인
1. 웹 브라우저를 연다
2. 주소를 입력한다.(http://localhost:9090/app14-1.0.0-BUILD-SNAPSHOT)

-------------------------------------------------------------------------------

contextPath 이름 수정하는법(app14-1.0.0-BUILD-SNAPSHOT -> app14)

webapps 들어가서 생성된 war 파일을 지운다(Tomcat이 꺼져있는 상태로 진행해야한다.)
*Maven Build 결과 war 파일 이름 바꾸기
pom.xml에서 작업하면 된다. 
<build>
   <finalName>${artifactId}</finalName>
   ....
</build>
CATARINA_HOME/target 에서 war파일을 모두 제거한다.
*Tomcat을 끄고 키고 생성된 파일 다 지우고 다시 배포 이런거 사소한거 중요!, 소스코드 한글자라고 바꾸면 다시 배포해야함!
* 배포후 확인 
	http://localhost:9090/app14
-----------------------------------------------------------------------------------------------------------------

* 컨텍스트 패스가 없는 배포
  1. war파일의 이름을 ROOT.war로 바꾼다.
  2. CATARINA_HOME\webapps 디렉터리에는 이미 ROOT 디렉터리가 있다.
     해당 ROOT 디렉터리의 내용을 모두 지운다.
  3. 배포하고 확인한다.
	http://localhost:9090
특징 :주소창에 컨텍스프 패스가 안나온다.
컨텍스트패스가 없으므로 다른 방법으로 구성해야한다.

컨텍스트패스가없는 주소는 아팟치 홈페이지가 나오게 되어있다.

CATARINA_HOME\webapps\ROOT 디렉터리 내용을 지운다 또는 (추천)폴더 자체를 삭제한다. 

// 여기까지 수동배포

*-----------------------------------------------------------------------------------------------------------------*

* 자동 빌드 및 배포 툴 jenkins 사용해 보기
1. maven 다운로드 
	1) mvnrepository.com에서 maven compiler plugin 3.8.1 버전을 지원한다.
	2) pom.xml
		<properties>
		   <maven-version>3.8.1</maven-version> 
		</properties>
		<build>
		   <plugin>
		      <artifactId>maven-compiler-plugin</artifactId>
		      <version>${maven-version}</version>
		    </plugin>
		</build>
	3) https://maven.apache.org/에서 3.8.1 다운로드
	     주소: https://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/
	   (1) windows : apache-maven-3.8.1-bin.zip   
	   (2) linux   : apache-maven-3.8.1-bin.tar.gz 

2. apache-maven-3.8.1-bin.zip 파일을 압축 풀어서 MAVEN_HOME을 등록한다.
	1) 경로 C:\Program Files\Maven3.8 디렉터리에 압축을 푼다.
	2) 환경변수 등록
	   (1) 이름 MAVEN_HOME
	     (2) 경로 C:\Program Files\Maven3.8
	3) path에다가 편집으로 bin까지 경로설정시키기

3. 프로젝트에 build 인코딩을 추가한다. 
   빌드툴을 써야하기 때문에(로컬이라서 잘 되는것일뿐 꼭해야하는 작업이다.) 
<properties>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
</properties>

3. Git(실무에서는 application.properties 를 올려야 하는 상황이라면 암호화와 복호화 과정을 
	거치면서 push를 하고 jenkins를 사용한다, 지금 우리는 할수있는 상황이아니다, 	application.properties을 못올리므로)
   1) 원격 레파지토리를 만든다.
   2) 프로젝트를 원격 레파지토리에 push한다.

	GDJ_@gdj MINGW64 /c/14_Pjt_Deploy
	$ git init
	GDJ_@gdj MINGW64 /c/14_Pjt_Deploy (main)
	$ git remote add origin https://github.com/komewel/14_Pjt_Deploy.git
	GDJ_@gdj MINGW64 /c/14_Pjt_Deploy (main)
	$ git add .
	GDJ_@gdj MINGW64 /c/14_Pjt_Deploy (main)
	$ git commit -m '2023-06-07'
	GDJ_@gdj MINGW64 /c/14_Pjt_Deploy (main)
	$ git push origin main

4. Tomcat 
  1) CATARINA_HOME\conf\tomcat-users.xml 파일을 연다.
  2) 아래 태그들을 추가한다.
	<role rolename="manager-gui"/>
  	<role rolename="manager-script"/>
  	<role rolename="manager-jmx"/>
  	<role rolename="manager-status"/>
  3) CATARINA_HOME\lib 디렉터리에 ojdbc6.jar 또는 mysql-connector-j-8.0.31.jar를 가져다     	둔다(없으면 maven-repository에서 mysql-connecto-j 검색 8.0.31 버전 jar 다운로드)
	굳이 안해도 되지만 자르 파일이 없으면 오류가 뜨는 경우가 있어 예방으로 이렇게 했다 

4. Jenkins	

	1). jenkins 다운로드(git에 올라간 소스코드를 바탕으로 배포해주는 기능)
		(1) https://www.jenkins.io/
		(2) LTS (Stable) - Generic Java Package(.war)
	2). CATARINA_HOME\webapps\jenkins.war 파일을 두고 Tomcat을 구동한다.
	3). jenkins을 실행한다.
	     http://localhost:9090/jenkins 주소로 접속한다. 
	4). 관리자 비밀번호가 생성된다. users -> GDJ_->.jenkis->secrets->			    initialAdminPassword

제대로 작동이 안될시 users\GDJ 에서 jenkins를 지우자(히스토리 제거)

접속시 install suggested plugins 를 누르면된다 (필요한 플러그인을 다운받게 해준다)

초기 비밀번호를 입력한다 
C:\Users\GDJ\.jenkins\secrets\initialAdminPassword 파일에 저장되어 있다.

jenkins를 사용할 계정 정보를 입력한다	
1) 계정명 : admin
2) 비밀번호 : 1111

젠킨스 주소를 물으면  이런 형식이다. jenkins url : http://127.0.0.1:9090/jenkins
(젠킨스가 실행할때는 톰캣을 계속 동작하게 두어야 한다.)

설정 -> tools -> settings file in filesystem으로 설정하고 
C:\Program Files\Maven3.8\conf\settings.xml(메이븐 빌드를 무엇으로 할것이냐)
global settings file on filesystem
C:\Program Files\Maven3.8\conf\settings.xml

Add JDK 누르고 
name에는 맘대로 
경로는 C:\Program Files\Java\jdk-11.0.17

git installations
name에는 맘대로
경로는 C:\Program Files\Git\bin\git.exe(깃 실행파일)

Maven
name에는 맘대로
체크 해제하고 MAVEN_HOME : C:\Program Files\Maven3.8

tools -> plugins -> available plugins -> deploy to container검색 -> 체크하고 
재시작 없이 다운로드(download without restart) 버튼 누르면 끝

git : personal access token
tomcat-manager/1111

tools -> credentials -> (global) -> 옆에 마우스 클릭말고 갖다가 대면 add crede
dentials -> username : tomcat-manager password : 1111 description : Tomcat

하나 더 추가하돼 깃 나의 아이디로 만든다 username : komewel
password : token값 Description : Git

프로젝트 만들기 -> 새로운 item -> 프로젝트 이름 맘대로 -> Freestyle project클릭 -> 
general은 무시 -> 소스코드 관리 : git으로 바꾸기 ->  buildSteps -> invoke top-level Maven targets -> Maven Version : myMaven , goals: clean package

빌드 후 조치 추가 -> Deploy war/ear to a container -> WAR/EAR files : **/*.war 
Credentials : 아까 만든 tomcat-manager -> Tomcat URL : http://localhost:9090 적고 저장

빌드진행하기전에 pom.xml에서 commons-io, commons-fileupload, thumbnail 지우기 


빌드를 위한 maven.apache.org 접속 -> other releases -> Maven 3 archives 접속 -> 3.8.1 다운-> binaries들어가서 -> zip(4번째, tar.gz는 리눅스버전)파일 다운로드
maven-eclipse-plugin 덕분에 따로 다운 안받고 라이브러리를 쓸수 있었는데
maven-compiler-plugin 3.8.1버전으로 바꿔서 쓸라고 하는중(수동으로 바꿔줘야 하나봄, 연습?)
<maven-version>3.8.1</maven-version>을 <properties>안에 작성해주고 변수로 설정
-------------------------------------------------------------------------
cafe24 에서 호스팅을 사면 mysql이 공짜로 지원 된다 고로, MySQL 외부 IP 접근 설정
FTP 접속 : war 옮기기 - filezilla(툴)
 구글에 filezilla검색 접속 Quick download links에서 첫번째 클릭 -> 다운로드 버튼 누                                            르고 첫번째꺼 다운받으면 완료 오페라 브라우저 깔라는거 거부-> 모든 사용자용으로 선택     하고 다 넥스트 왼쪽이 로컬 오른쪽이 cafe24 server이다 
파일 -> 사이트 관리자 -> 새사이트 프로토콜 sftp로 설정 hostname은 프로젝트명 
비밀번호는 mongmong1220! db접속 비밀번호로 커넥션하고 만들면된다  
war파일 이름은 ROOT로 설정 배포하는법은 똑같이 webapps에다가 놓으면 된다.
배포하는법은 로컬에 있는 war파일을 오른쪽 서버에 webapps에다가 놓으면 된다
실행하는법은 filezilla 에서는 톰캣 실행할때는 startup.sh를 실행해야 한다(리눅스이므로) 실행한다고 더블클릭 누르진 말자 서버에서는 다운로드로 로컬에서는 서버에 올리는걸로 인식하므로 결론적으로 핵심은 실행도구는 따로 있다 filezilla에서는 실행할수가 없다 
서버(톰캣) 실행은 putty가 하는것이다. 

SSH 서버 접속 : putty(툴) 

구글에 myip검색후 나오는 ip로 외부 ip접근 설정
 
// 리눅스, 클라우드 aws를 공부하면 취업의 우대사항이 된다, 

mysql connection 옆 + 누르고 hostname 에는 cafe24에 서버 ip 적어주고 username에는 
프로젝트이름 적어주면 된다 checkconnection 하면 db비밀번호 물어보는데 초기설정한 비밀번호를 넣어주면된다

개발중 일때는
	driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy

	jdbc-url: jdbc:log4jdbc:mysql://서버아이피:3306/카페24아이디?	serverTimezone=Asia/seoul&characterEncoding=UTF-8

배포(애플리케이션 실행을 카페24의 서버에서 진행)  
	driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy

	jdbc-url: jdbc:log4jdbc:mysql://localhost(카페24의 로컬호스트):3306/	카페24아이디?serverTimezone=Asia/seoul&characterEncoding=UTF-8
	

	 
	



